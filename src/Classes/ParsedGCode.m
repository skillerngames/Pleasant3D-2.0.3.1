//
//  GCodeParser.m
//  Pleasant3D
//
//  Created by Eberhard Rensch on 07.02.10.
//  Copyright 2010 Pleasant Software. All rights reserved.
//
//  This program is free software; you can redistribute it and/or modify it under
//  the terms of the GNU General Public License as published by the Free Software
//  Foundation; either version 3 of the License, or (at your option) any later
//  version.
//
//  This program is distributed in the hope that it will be useful, but WITHOUT ANY
//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
//  PARTICULAR PURPOSE. See the GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License along with
//  this program; if not, see <http://www.gnu.org/licenses>.
//
//  Additional permission under GNU GPL version 3 section 7
//
//  If you modify this Program, or any covered work, by linking or combining it
//  with the P3DCore.framework (or a modified version of that framework),
//  containing parts covered by the terms of Pleasant Software's software license,
//  the licensors of this Program grant you additional permission to convey the
//  resulting work.
//
//  Ken Skillern:  9/3/2013 notes on revisions:
//                          Added or modified code to read GCode generated by ReplicatorG, MakerWare1 or MakerWare2.
//                          Tested OK.
//                          Added separate color set for dual extruder models, currently various shades of blue.
//                          Set tolerance for layer discrimination to 0.01mm since new MakerWare allows printing
//                              layers of about 0.1mm thickness.
//  Ken Skillern:  10/1/2013 notes on revisions:
//                          Added code to read Gcode generated by MakerWare 2.3.  Tested OK.  Specifically checks for
//                              "; Chunk" and "; Width"
//                          Changed application version to 2.0.3.1

#import "ParsedGCode.h"
#import <P3DCore/NSArray+GCode.h>

@interface NSScanner (ParseGCode)
- (void)updateLocation:(Vector3*)currentLocation;
- (BOOL)isLayerStartWithCurrentLocation:(Vector3*)currentLocation oldZ:(float*)oldZ layerStartWordExists:(BOOL)layerStartWordExist;
@end

@implementation NSScanner (ParseGCode)
- (void)updateLocation:(Vector3*)currentLocation
{
	float value;
	if([self scanString:@"X" intoString:nil])
	{
		[self scanFloat:&value];
		currentLocation.x = value;
	}
	if([self scanString:@"Y" intoString:nil])
	{
		[self scanFloat:&value];
		currentLocation.y = value;
	}
	if([self scanString:@"Z" intoString:nil])
	{
		[self scanFloat:&value];
		currentLocation.z = value;
	}
}

- (BOOL)isLayerStartWithCurrentLocation:(Vector3*)currentLocation oldZ:(float*)oldZ layerStartWordExists:(BOOL)layerStartWordExist
{
	BOOL isLayerStart = NO;
	
	if(layerStartWordExist)
	{
		if([self scanString:@"(<layer>" intoString:nil])
			isLayerStart = YES;
		if([self scanString:@"(Slice" intoString:nil])
			isLayerStart = YES;
        // Ken Skillern:  9/23/2013 modified code to add folowing line to check for "M135" in new MakerWare gcode
		if([self scanString:@"M135" intoString:nil])
			isLayerStart = YES;
        // Ken Skillern:  10/1/2013 added code to check for "; Chunk"
        if ([self scanString:@"; Chunk" intoString:nil])
            isLayerStart = YES;
	}
	else if([self scanString:@"G1" intoString:nil] ||
			[self scanString:@"G2" intoString:nil] ||
			[self scanString:@"G3" intoString:nil])
	{
		[self updateLocation:currentLocation];
        // Ken Skillern:  9/3/2013 modified following line to check for z change of 0.01 vs. .10
		if(currentLocation.z-*oldZ >0.01)
		{
			*oldZ=currentLocation.z;
			isLayerStart = YES;
		}
	}
	[self setScanLocation:0];
	return isLayerStart;
}

@end



@implementation ParsedGCode
@synthesize cornerHigh, cornerLow, extrusionWidth, panes;

static NSArray* _extrusionColors=nil;
static NSArray* _extrusionColors2=nil;
static CGColorRef _extrusionOffColor=nil;
+ (void)initialize
{
    // Ken Skillern:  9/3/2013  changed 'blue' to 'dark green'
	// 'brown', 'red', 'orange', 'yellow', 'green', 'dark green', 'purple'
	_extrusionColors = [NSArray arrayWithObjects:
                        NSMakeCollectable(CGColorCreateGenericRGB(0.855, 0.429, 0.002, 1.000)),
                        NSMakeCollectable(CGColorCreateGenericRGB(1.000, 0.000, 0.000, 1.000)),
                        NSMakeCollectable(CGColorCreateGenericRGB(1.000, 0.689, 0.064, 1.000)),
                        NSMakeCollectable(CGColorCreateGenericRGB(1.000, 1.000, 0.000, 1.000)),
                        NSMakeCollectable(CGColorCreateGenericRGB(0.367, 0.742, 0.008, 1.000)),
                        NSMakeCollectable(CGColorCreateGenericRGB(0.375, 0.680, 0.008, 1.000)),
                        NSMakeCollectable(CGColorCreateGenericRGB(0.821, 0.000, 0.833, 1.000)), nil];
    // Ken Skillern:  9/3/2013  added _extrusionColors2 for Dual Extrusion nozzles
    // 'blues' for Dual Extrusion nozzle 'B'
	_extrusionColors2 = [NSArray arrayWithObjects:
                         NSMakeCollectable(CGColorCreateGenericRGB(0.100, 0.500, 1.000, 1.000)),
                         NSMakeCollectable(CGColorCreateGenericRGB(0.500, 0.150, 0.900, 1.000)),
                         NSMakeCollectable(CGColorCreateGenericRGB(0.100, 0.300, 1.000, 1.000)),
                         NSMakeCollectable(CGColorCreateGenericRGB(0.500, 0.005, 0.900, 1.000)),
                         NSMakeCollectable(CGColorCreateGenericRGB(0.100, 0.200, 1.000, 1.000)),
                         NSMakeCollectable(CGColorCreateGenericRGB(0.500, 0.400, 0.900, 1.000)),
                         NSMakeCollectable(CGColorCreateGenericRGB(0.100, 0.200, 1.000, 1.000)), nil];
    
	_extrusionOffColor = (CGColorRef)CFMakeCollectable(CGColorCreateGenericRGB(0.902, 0.902, 0.902, .1));
}

- (id)initWithGCodeString:(NSString*)gcode;
{
	self = [super init];
	if(self)
	{
		// Create an array of linescanners
		NSMutableArray* gCodeLineScanners = [NSMutableArray array];
		NSArray* untrimmedLines = [gcode componentsSeparatedByCharactersInSet:[NSCharacterSet newlineCharacterSet]];
		NSCharacterSet* whiteSpaceSet = [NSCharacterSet whitespaceCharacterSet];
		[untrimmedLines enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
			
            [gCodeLineScanners addObject:[NSScanner scannerWithString:[obj stringByTrimmingCharactersInSet:whiteSpaceSet]]];
            
		}];
        
		extrusionWidth = 0.;
		
		// MakerWare 1.1 uses Slice and has no <layer>
        // Ken Skillern:  9/3/2012 modified code to add check for "M135" as well (note:  could check for "; Slice" in current Maker Ware generated GCode, but going forward M135 is better check.
        // Ken Skillern:  10/1/2013 modified code to add check for "; Chunk" as well in newest MakerWare 2.3.
		BOOL isThereALayerStartWord=[gCodeLineScanners isThereAFirstWord:@"(<layer>"] || [gCodeLineScanners isThereAFirstWord:@"(Slice"] || [gCodeLineScanners isThereAFirstWord:@"M135"] || [gCodeLineScanners isThereAFirstWord:@"; Chunk"];
		
		panes = [NSMutableArray array];
		__block NSMutableArray* currentPane = nil;
		__block Vector3* currentLocation = [[Vector3 alloc] initVectorWithX:0. Y:0. Z:0.];
		__block float oldZ = -FLT_MAX;
		__block NSInteger extrusionNumber = 0;
		__block Vector3* highCorner = [[Vector3 alloc] initVectorWithX:-FLT_MAX Y:-FLT_MAX Z:-FLT_MAX];
		__block Vector3* lowCorner = [[Vector3 alloc] initVectorWithX:FLT_MAX Y:FLT_MAX Z:FLT_MAX];
		__block float localExtrutionWidth = 0.;
		__block double lastEValue = 0.0;
        // Ken Skillern:  9/3/2013  added lastAValue and lastBValue
		__block double lastAValue = 0.0;
		__block double lastBValue = 0.0;
        // Ken Skillern:  9/3/2013  added gValue
        __block NSInteger gValue = 0;
		__block BOOL extrusionOff = NO;
        // Ken Skillern:  9/3/2013  removed makerWareInUse as obsolete due to other checks in modified code
		//__block BOOL makerWareInUse = YES;
        
		[gCodeLineScanners enumerateObjectsUsingBlock:^(id scanner, NSUInteger idx, BOOL *stop) {
			
            NSScanner* lineScanner = (NSScanner*)scanner;
			[lineScanner setScanLocation:0];
			if ([lineScanner isLayerStartWithCurrentLocation:currentLocation oldZ:&oldZ layerStartWordExists:isThereALayerStartWord]) {
				extrusionNumber = 0;
				currentPane = [NSMutableArray array];
				[panes addObject:currentPane];
			}
            
            [lineScanner setScanLocation:0];
            if ([lineScanner scanString:@"M101" intoString:nil]) {
                extrusionNumber++;
                [currentPane addObject:[_extrusionColors objectAtIndex:extrusionNumber%[_extrusionColors count]]];
            }
            
            [lineScanner setScanLocation:0];
            if ([lineScanner scanString:@"M103" intoString:nil]) [currentPane addObject:(id)_extrusionOffColor];
            
            [lineScanner setScanLocation:0];
            if ([lineScanner scanString:@"(<extrusionWidth>" intoString:nil]) [lineScanner scanFloat:&localExtrutionWidth];
            // Ken Skillern:  10/1/2013 added code to check for MakerWare 2.3 extrusion width looking for "; Width"
            if ([lineScanner scanString:@"; Width" intoString:nil]) [lineScanner scanFloat:&localExtrutionWidth];
            
            
            //////////////////////////////////////////////////////////////////////////////
            // Ken Skillern:  9/3/2013  added following code to determine E, A, or B values
            // Ken Skillern:  9/3/2013  start of modified code block

            BOOL hasG1 = FALSE;
            [lineScanner setScanLocation:0];
            if ([lineScanner scanString:@"G" intoString:nil]) {
                [lineScanner scanInteger:&gValue];
                // Ken Skillern:  9/3/2013  Check for "G1" and not "G1xx"
                if (gValue == 1) hasG1 = TRUE;
            }
            
            if (hasG1) {
                // save information for pane object
                [lineScanner updateLocation:currentLocation];
                [currentPane addObject:[[currentLocation copy] autorelease]];
                [lowCorner minimizeWith:currentLocation];
                [highCorner maximizeWith:currentLocation];

                // setup for scanning string
                NSCharacterSet *codeset = [NSCharacterSet characterSetWithCharactersInString:@"EAB"];
                NSString *scanned = nil;
                char codechar;
                                
                // Ken Skillern:  9/3/2013  modified from scanner
                // scan for "E", "A", "B" to indicate extrusion state of the nozzle
                // removed makerWareInUse as well as it is not required when checking for EAB characters.
                [lineScanner scanCharactersFromSet:codeset intoString:&scanned];
                if (scanned) codechar = [scanned characterAtIndex:0];
                
                //scan the string
                while ([lineScanner scanUpToCharactersFromSet:codeset intoString:&scanned]) {
                    double codeValue = [scanned doubleValue];
                    // Ken Skillern:  9/3/2013  the following code eliminates need for snort and squirt checks
                    // Ken Skillern:  9/3/2013  check for MakerWare 1.1 code which uses 'E'
                    if (codechar == 'E') {
                        if (codeValue > 0.0) {
                            if(codeValue < lastEValue) {
                                // snort found
                                [currentPane addObject:(id)_extrusionOffColor];
                                extrusionOff = YES;
                           } else if (extrusionOff && (codeValue > lastEValue)) {
                                // squirt found
                                extrusionNumber++;
                                [currentPane addObject:[_extrusionColors objectAtIndex:extrusionNumber%[_extrusionColors count]]];
                                extrusionOff = NO;
                            }
                            lastEValue = codeValue;
                        }
                    }
                    // Ken Skillern:  9/3/2013  check for MakerWare 2.0+ code which uses 'A' or 'B'
                    if (codechar == 'A') {
                        if (codeValue > 0.0) {
                            if(codeValue < lastAValue) {
                                // snort found
                                [currentPane addObject:(id)_extrusionOffColor];
                                extrusionOff = YES;
                            } else if (extrusionOff && (codeValue > lastAValue)) {
                                // squirt found
                                extrusionNumber++;
                                [currentPane addObject:[_extrusionColors objectAtIndex:extrusionNumber%[_extrusionColors count]]];
                                extrusionOff = NO;
                            }
                            lastAValue = codeValue;
                        }
                    }
                    // Ken Skillern:  9/3/2013  check for MakerWare 2.0+ code which uses 'A' or 'B'
                    if (codechar == 'B') {
                        if (codeValue > 0.0) {
                            if(codeValue < lastBValue) {
                                // snort found
                                [currentPane addObject:(id)_extrusionOffColor];
                                extrusionOff = YES;
                            } else if (extrusionOff && (codeValue > lastBValue)) {
                                // squirt found
                                extrusionNumber++;
                                // Ken Skillern:  9/3/2013 for second extruder, use color from alternate list of colors
                                [currentPane addObject:[_extrusionColors2 objectAtIndex:extrusionNumber%[_extrusionColors2 count]]];
                                extrusionOff = NO;
                            }
                            lastBValue = codeValue;
                        }
                    }
                    // skip over delimeter
                    [scanner scanCharactersFromSet:codeset intoString:&scanned];
                    if (scanned) codechar = [scanned characterAtIndex:0];
                }
            }
            // Ken Skillern:  9/3/2013  end of modified code block
            //////////////////////////////////////////////////////////////////////////////
		}];
		cornerLow = lowCorner;
		cornerHigh = highCorner;
		extrusionWidth = localExtrutionWidth;
	}
	return self;
}
@end